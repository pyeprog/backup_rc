# Functions
# prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3}) {
		${0:${VISUAL}}
	};
endsnippet

# Flow control
# if
snippet if "if (condition) { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	}
endsnippet

# if ... else
snippet ife "if (condition) { ... } else { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	} else {
		${2}
	}
endsnippet

# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
endsnippet

snippet case "case 'xyz': ... break"
	case '${1:case}':
		${0:${VISUAL}}
		break;
endsnippet

snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	} finally {
		${3:/* be executed regardless of the try / catch result*/}
	}
endsnippet

# throw Error
snippet terr
	throw new Error('${1:error message}')
endsnippet

# return
snippet ret
	return ${0:result};
endsnippet

snippet for "for (...) {...}"
	for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
		${0:${VISUAL}}
	}
endsnippet

snippet forr "reversed for (...) {...}"
	for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
		${0:${VISUAL}}
	}
endsnippet

snippet wh "(condition) { ... }"
	while (${1:/* condition */}) {
		${0:${VISUAL}}
	}
endsnippet

snippet do "do { ... } while (condition)"
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */});
endsnippet

# For in loop
snippet fori
	for (var ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}
endsnippet

# Objects
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0:${VISUAL}}
	},
endsnippet

# hasOwnProperty
snippet has
	hasOwnProperty(${0})
endsnippet

# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;
		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
endsnippet

# Crockford's object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
endsnippet

# Define multiple properties
snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
endsnippet

# Define single property
snippet prop
	Object.defineProperty(
		${1:object},
		'${2:property}',
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);
endsnippet

# Documentation
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
endsnippet

snippet @par
	@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret
	@return {${1:type}} ${0:description}
endsnippet

# JSON

# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
endsnippet

# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});
endsnippet

# DOM selectors
# Get elements
snippet get
	getElementsBy${1:TagName}('${0}')
endsnippet

# Get element
snippet gett
	getElementBy${1:Id}('${0}')
endsnippet

# Elements by class
snippet by.
	${1:document}.getElementsByClassName('${0:class}')
endsnippet

# Element by ID
snippet by#
	${1:document}.getElementById('${0:element ID}')
endsnippet

# Query selector
snippet qs
	${1:document}.querySelector('${0:CSS selector}')
endsnippet

# Query selector all
snippet qsa
	${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet

# Debugging
snippet de
	debugger;
endsnippet

snippet cl "console.log"
	console.log(${0});
endsnippet

snippet cd "console.debug"
	console.debug(${0});
endsnippet

snippet ce "console.error"
	console.error(${0});
endsnippet

snippet cw "console.warn"
	console.warn(${0});
endsnippet

snippet ci "console.info"
	console.info(${0});
endsnippet

snippet ct "console.trace"
	console.trace(${0:label});
endsnippet

snippet ctime "console.time ... console.timeEnd"
	console.time("${1:label}");
	${0:${VISUAL}}
	console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp"
	console.timeStamp("${1:label}");
endsnippet

snippet ca "console.assert"
	console.assert(${1:expression}, ${0:obj});
endsnippet

snippet cclear "console.clear"
	console.clear();
endsnippet

snippet cdir "console.dir"
	console.dir(${0:obj});
endsnippet

snippet cdirx "console.dirxml"
	console.dirxml(${1:object});
endsnippet

snippet cgroup "console.group"
	console.group("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed"
	console.groupCollapsed("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();
endsnippet

snippet cprof "console.profile"
	console.profile("${1:label}");
	${0:${VISUAL}}
	console.profileEnd();
endsnippet

snippet ctable "console.table"
	console.table(${1:"${2:value}"});
endsnippet

# Misc
# 'use strict';
snippet us
	'use strict';
endsnippet

# setTimeout function
snippet timeout
	setTimeout(function () {${0}}${2}, ${1:10});
endsnippet

#	
# mocha debug
# 
snippet des "describe('thing', () => { ... })" b
	describe('${1:}', () => {
		${0:${VISUAL}}
	});
endsnippet

snippet it "it('should do', () => { ... })" b
	it('${1:}', () => {
		${0:${VISUAL}}
	});
endsnippet

snippet xit "xit('should do', () => { ... })" b
	xit('${1:}', () => {
		${0:${VISUAL}}
	});
endsnippet

snippet bef "before(() => { ... })" b
	before(() => {
		${0:${VISUAL}}
	});
endsnippet

snippet befe "beforeEach(() => { ... })" b
	beforeEach(() => {
		${0:${VISUAL}}
	});
endsnippet

snippet aft "after(() => { ... })" b
	after(() => {
		${0:${VISUAL}}
	});
endsnippet

snippet afte "afterEach(() => { ... })" b
	afterEach(() => {
		${0:${VISUAL}}
	});
endsnippet

snippet exp "expect(...)" b
	expect(${1:})${0};
endsnippet

snippet expe "expect(...).to.equal(...)" b
	expect(${1:}).to.equal(${0});
endsnippet

snippet expd "expect(...).to.deep.equal(...)" b
	expect(${1:}).to.deep.equal(${0});
endsnippet

# mocha debug end

#
# node
#
snippet #!
	#!/usr/bin/env node
endsnippet

# module exports
snippet ex
	module.exports = ${1};
endsnippet

# require
snippet re
	${1:const} ${2} = require('${3:module_name}');
endsnippet

# EventEmitter
snippet on
	on('${1:event_name}', function(${2:stream}) {
	  ${3}
	});
endsnippet

snippet emit
	emit('${1:event_name}', ${2:args});
endsnippet

snippet once
	once('${1:event_name}', function(${2:stream}) {
	  ${3}
	});
endsnippet

# http. User js function snippet as handler
snippet http
	http.createServer(${1:handler}).listen(${2:port_number});
endsnippet

# net 
snippet net
	net.createServer(function(${1:socket}){
		${1}.on('data', function('data'){
		  ${2}
		]});
		${1}.on('end', function(){
		  ${3}
		});
	}).listen(${4:8124});
endsnippet

# Stream snippets
snippet pipe
	pipe(${1:stream})${2}
endsnippet

# Express snippets
snippet eget
	${1:app}.get('${2:route}', ${3:handler});
endsnippet

snippet epost
	${1:app}.post('${2:route}', ${3:handler});
endsnippet

snippet eput
	${1:app}.put('${2:route}', ${3:handler});
endsnippet

snippet edel
	${1:app}.delete('${2:route}', ${3:handler});
endsnippet

# process snippets
snippet stdin
	process.stdin
endsnippet

snippet stdout
	process.stdout
endsnippet

snippet stderr
	process.stderr
endsnippet

# node end

#
# javascript es6
#
snippet const
	const ${1} = ${0};
endsnippet

snippet let
	let ${1} = ${0};
endsnippet

snippet im "import xyz from 'xyz'"
	import ${1} from '${2:$1}';
endsnippet

snippet imas "import * as xyz from 'xyz'"
	import * as ${1} from '${2:$1}';
endsnippet

snippet imm "import { member } from 'xyz'"
	import { ${1} } from '${2}';
endsnippet

snippet cla
	class ${1} {
		${0:${VISUAL}}
	}
endsnippet

snippet clax
	class ${1} extends ${2} {
		${0:${VISUAL}}
	}
endsnippet

snippet clac
	class ${1} {
		constructor(${2}) {
			${0:${VISUAL}}
		}
	}
endsnippet

snippet foro "for (const prop of object}) { ... }"
	for (const ${1:prop} of ${2:object}) {
		${0:$1}
	}
endsnippet

# Generator
snippet fun*
	function* ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}
endsnippet

snippet c=>
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet caf
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet =>
	(${1}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet af
	(${1}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet sym
	const ${1} = Symbol('${0}');
endsnippet

snippet ed
	export default ${0}
endsnippet

snippet ${
	${${1}}${0}
endsnippet
# javascript es6 
